'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var BLANK_REG = /[\(\)#]/g;
var P_REG = /%/g;
var SYMBOL_REG = /[&,:"\s]/g;
var AT_REG = /@/g;
var DOT_REG = /\./g;

var clean = exports.clean = function clean(str) {
  return ('' + str).replace(BLANK_REG, '').replace(P_REG, 'P').replace(SYMBOL_REG, '_').replace(AT_REG, '_').replace(DOT_REG, 'p');
};

var hyphenate = exports.hyphenate = function hyphenate(str) {
  return ('' + str).replace(/[A-Z]|^ms/g, '-$&').toLowerCase();
};

var combine = exports.combine = function combine() {
  var str = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
  return function () {
    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return args.filter(function (a) {
      return a !== null;
    }).join(str);
  };
};

var addPx = exports.addPx = function addPx(prop, value) {
  if (typeof value !== 'number') return value;
  if (unitlessProps.indexOf(prop) > -1) return value;
  return value + 'px';
};

var unitlessProps = ['animationIterationCount', 'boxFlex', 'boxFlexGroup', 'boxOrdinalGroup', 'columnCount', 'flex', 'flexGrow', 'flexPositive', 'flexShrink', 'flexNegative', 'flexOrder', 'gridRow', 'gridColumn', 'fontWeight', 'lineClamp', 'lineHeight', 'opacity', 'order', 'orphans', 'tabSize', 'widows', 'zIndex', 'zoom', 'fillOpacity', 'stopOpacity', 'strokeDashoffset', 'strokeOpacity', 'strokeWidth'];