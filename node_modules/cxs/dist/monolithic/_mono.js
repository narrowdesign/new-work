'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.reset = exports.css = exports.sheet = exports.cache = undefined;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _sheet = require('glamor/lib/sheet');

var _hash = require('../hash');

var _hash2 = _interopRequireDefault(_hash);

var _util = require('../util');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var cache = exports.cache = {};

var sheet = exports.sheet = new _sheet.StyleSheet();

sheet.inject();

var css = exports.css = function css() {
  return sheet.rules().map(function (rule) {
    return rule.cssText;
  }).join('');
};

var reset = exports.reset = function reset() {
  for (var key in cache) {
    delete cache[key];
  }
  sheet.flush();
};

var cxs = function cxs(a, b) {
  var selector = void 0;
  if (typeof a === 'string') {
    selector = a;
  }
  var style = selector ? b : a;
  var hashname = (0, _hash2.default)(JSON.stringify(style));
  selector = selector || '.' + hashname;

  parse(selector, style);

  return hashname;
};

var parse = function parse(selector, obj, media) {
  var children = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';

  for (var key in obj) {
    var value = obj[key];
    var type = typeof value === 'undefined' ? 'undefined' : _typeof(value);

    if (type === 'number' || type === 'string') {
      createRule(selector + children, key, value, media);
      continue;
    } else if (/^:/.test(key)) {
      parse(selector, value, media, children + key);
      continue;
    } else if (/^@media/.test(key)) {
      parse(selector, value, key, children);
      continue;
    } else {
      parse(selector, value, media, children + ' ' + key);
      continue;
    }
  }
};

var createRule = function createRule(selector, key, value, media) {
  var id = selector + key + value + media;

  if (cache[id]) return;

  var prop = (0, _util.hyphenate)(key);
  var val = (0, _util.addPx)(key, value);
  var rule = selector + '{' + prop + ':' + val + '}';
  var css = media ? media + '{' + rule + '}' : rule;

  sheet.insert(css);
  cache[id] = true;

  return;
};

cxs.reset = reset;
cxs.css = css;

exports.default = cxs;