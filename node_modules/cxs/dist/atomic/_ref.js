'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.css = exports.reset = exports.cache = exports.sheet = undefined;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
// import { insert, reset, css } from '../sheet'


var _addPxToStyle = require('add-px-to-style');

var _addPxToStyle2 = _interopRequireDefault(_addPxToStyle);

var _hash = require('../hash');

var _hash2 = _interopRequireDefault(_hash);

var _util = require('../util');

var _shorthands = require('./shorthands');

var _shorthands2 = _interopRequireDefault(_shorthands);

var _sheet = require('glamor/lib/sheet');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var sheet = exports.sheet = new _sheet.StyleSheet();

sheet.inject();

var cache = exports.cache = {};

var reset = exports.reset = function reset() {
  for (var key in cache) {
    delete cache[key];
  }
  sheet.flush();
};

var css = exports.css = function css() {
  return sheet.rules().map(function (r) {
    return r.cssText;
  }).join('');
};

var cxs = function cxs(style) {
  // const rules = createStylesArray(style)
  // .map(createRule)
  // const classNames = rules
  //   .map(rule => rule.className)

  // rules.forEach(insert)

  var classNames = parse(style);

  return classNames.join(' ');
};

var parse = function parse(obj, media) {
  var children = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';

  var classNames = [];

  var _loop = function _loop(key) {
    var value = obj[key];
    var type = typeof value === 'undefined' ? 'undefined' : _typeof(value);

    if (type === 'string' || type === 'number') {
      classNames.push(createStyle(key, value, media, children));
      return 'continue';
    }

    if (Array.isArray(value)) {
      value.forEach(function (val) {
        classNames.push(createStyle(key, value, media, children));
      });
      return 'continue';
    }

    if (/^:/.test(key)) {
      parse(value, media, children + key).forEach(function (className) {
        classNames.push(className);
      });
      return 'continue';
    }

    if (/^@media/.test(key)) {
      parse(value, key, children).forEach(function (className) {
        classNames.push(className);
      });
      return 'continue';
    }

    parse(value, media, children + ' ' + key).forEach(function (className) {
      classNames.push(className);
    });
    return 'continue';
  };

  for (var key in obj) {
    var _ret = _loop(key);

    if (_ret === 'continue') continue;
  }

  return classNames;
};

var createStyle = function createStyle(key, value, media) {
  var children = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';

  var prefix = (media || '') + children;
  var id = key + value + prefix;
  var dupe = cache[id];

  if (dupe) return dupe;

  var className = createClassName(key, value, prefix);
  var selector = '.' + className + children;
  var prop = (0, _util.hyphenate)(key);
  var val = (0, _addPxToStyle2.default)(key, value);
  var rule = selector + '{' + prop + ':' + val + '}';
  var css = media ? media + '{' + rule + '}' : rule;

  sheet.insert(css);
  cache[id] = className;

  return className;
};

var abbr = function abbr(str) {
  return str.split('-').map(function (c) {
    return c.charAt(0);
  }).join('');
};

var createClassName = function createClassName(prop, value, prefix) {
  var base = (_shorthands2.default.indexOf(prop) > -1 ? abbr(prop) : prop).replace(/^-/, '');
  var parts = (0, _util.combine)('-')(prefix ? (0, _util.clean)(prefix) : null, base, (0, _util.clean)(value));

  var className = parts.length < 16 ? parts : (0, _hash2.default)(parts);
  return className;
};

/*
const createRule = ({ id, key, value, parent = '', selector = '' }) => {
  const prop = hyphenate(key)
  const prefix = combine()(parent, selector)
  const className = createClassName(prop, value, prefix)
  const sel = combine()('.', className, selector)
  const rule = `${sel}{${prop}:${addPx(key, value)}}`
  const css = parent ? `${parent}{${rule}}` : rule

  return {
    id: className + id,
    className,
    css
  }
}
*/

cxs.reset = reset;
cxs.css = css;

// export { css } from '../sheet'
exports.default = cxs;