'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

// WIP

// Parse from document stylesheet

var parseRules = exports.parseRules = function parseRules(styletag) {
  var rules = [].slice.call(styletag.sheet.cssRules).map(function (r) {
    return r.cssText;
  }).map(function (css) {
    var className = (/\.[a-zA-Z]+(:|{|\s)/.exec(css) || [''])[0].replace(/^\./, '');
    var media = (/^@media.+{/.exec(css) || [''])[0].replace(/\s{$/, '');
    var pseudo = (/:[a-z0-9-+\(\)]+/.exec(css) || [''])[0];
    var key = (/{\s[a-z-]+:/.exec(css) || [''])[0].replace(/^{\s/, '');

    return {
      // css,
      // id: key + media + pseudo,
      key: key,
      className: className
    };
  });

  // console.log(rules)
};

var rehydrate = function rehydrate(cache, css) {
  var rules = getRules(css);
  var ids = rules.map(getId);
  // console.log(css, '\n\n')
  // console.log(rules)
};

// WIP
var ruleRegex = /{[a-z0-9.\s-:\(\)]+}/g;
var mediaRegex = /@media[a-z0-9.\s-:\(\)\{]+\}/g;

var getRules = function getRules(css) {
  return css.match(mediaRegex);
};

var getId = function getId(rule) {
  var media = rule.match(/^@media.+{\.[a-zA-Z]+/g);
  if (media) {
    // console.log(media)
    // rule = rule.replace(/^@media.+{\.[a-zA-Z]+/, '')
  }
  return rule.replace(/^\.[a-zA-Z]+/, ''); // + (media ? media : '')
};
exports.default = rehydrate;